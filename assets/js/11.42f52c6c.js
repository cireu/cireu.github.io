(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{145:function(a,s,t){"use strict";t.r(s);var e=t(4),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"doom-emacs-配置的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#doom-emacs-配置的问题","aria-hidden":"true"}},[a._v("#")]),a._v(" doom-emacs 配置的问题")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/hlissner/doom-emacs",target:"_blank",rel:"noopener noreferrer"}},[a._v("doom-emacs"),t("OutboundLink")],1),a._v(" 最近似乎挺流行了，许多\n Spacemacs 用户宣称自己要切换到 doom-emacs 上来，也有不少人给 Emacs 新人推荐 doom-emacs\n 作为 starter kit. 然而经过我一段时间的研究，我发现 doom-emacs 存在一些的问题使其对\n试图通过学习它来进阶 Emacs Lisp 用户，以及需要深度 hack in Emacs 的用户来说并不\n是那么友好.")]),a._v(" "),t("p",[a._v("虽然本文试图揭示 doom-emacs 配置内部存在的一些问题，但我必须声明我并没有长时间使用\n doom-emacs 的经验，入门 Emacs 的时候，我用过一阵子\n"),t("a",{attrs:{href:"https://github.com/syl20bnr/spacemacs",target:"_blank",rel:"noopener noreferrer"}},[a._v(" Spacemacs"),t("OutboundLink")],1),a._v(". 此后我就一直使用我"),t("a",{attrs:{href:"https://framagit.org/citreu/emacs.d/blob/master/etc/init-emacs-lisp.el#L3",target:"_blank",rel:"noopener noreferrer"}},[a._v("自己写的\n配置"),t("OutboundLink")],1),a._v("\n本文基于我的 Elisp 插件编写经验，学习配置的时候对 doom-emacs 底层机制的了解而得出，如果有\n什么谬误，欢迎来信探讨.")]),a._v(" "),t("h2",{attrs:{id:"宏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#宏","aria-hidden":"true"}},[a._v("#")]),a._v(" 宏")]),a._v(" "),t("h3",{attrs:{id:"被滥用的宏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#被滥用的宏","aria-hidden":"true"}},[a._v("#")]),a._v(" 被滥用的宏")]),a._v(" "),t("p",[a._v("doom-emacs 作者似乎很喜欢炫技，在配置里引入了各种各样的 macro. doom-emacs 有一堆感\n叹号结尾的宏， "),t("code",[a._v("after!")]),a._v(" ,  "),t("code",[a._v("lambda!")]),a._v(" "),t("sup",{staticClass:"footnote-ref"},[t("a",{attrs:{href:"#fn1",id:"fnref1"}},[a._v("[1]")])]),a._v(",  "),t("code",[a._v("lambda!!")]),a._v(" ,  "),t("code",[a._v("delq!")]),a._v(" . 写起配置来仿佛\n是在写一篇措辞激烈的徼文一样！")]),a._v(" "),t("p",[a._v("过度使用宏，会带来理解上的困难。而且 doom-emacs 里的这些宏，真的有包装成宏的必要么？\n 比如 "),t("code",[a._v("lambda!")])]),a._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("defmacro")]),a._v(" λ! "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("&rest body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Expands to (lambda () (interactive) ,@body)."')]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token declare keyword"}},[a._v("declare")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("doc-string")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("`(")]),t("span",{pre:!0,attrs:{class:"token lambda"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("lambda")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}}),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token interactive keyword"}},[a._v("interactive")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[a._v(",@body")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("完全可以直接写成简单清楚的 "),t("code",[a._v("(lambda () (interactive) ..forms)")]),a._v("  比起 "),t("code",[a._v("lambda!")]),a._v("  的确多\n打了不少字。但能更的提示用户这是一个 interactive lambda.")]),a._v(" "),t("p",[a._v("如果这种 macro 的确能减少配置中的 boilerplate, 那就算了。然而当你用 "),t("code",[a._v("grep")]),a._v("  搜索\n doom-emacs 源码时，实际上 "),t("code",[a._v("lambda!")]),a._v("  只被使用了 4 次"),t("sup",{staticClass:"footnote-ref"},[t("a",{attrs:{href:"#fn2",id:"fnref2"}},[a._v("[2]")])]),a._v("，这令我感到十分无语，\n 因为你完全可以用 "),t("code",[a._v("defun")]),a._v("  直接定义一个有名字的 interactive 函数，而不需要用 "),t("code",[a._v("fset")]),a._v(" +\n "),t("code",[a._v("lambda!")]),a._v("  这种令人费解的操作...")]),a._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";; It's the same!")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v(";; And `defun' form even have better indentation...")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token defun"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("defun")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("my-function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}}),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")])]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token interactive keyword"}},[a._v("interactive")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  ...body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("fset")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[a._v("'my-function")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("lambda!")]),a._v(" ...body"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("h3",{attrs:{id:"拙劣的宏设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拙劣的宏设计","aria-hidden":"true"}},[a._v("#")]),a._v(" 拙劣的宏设计")]),a._v(" "),t("p",[a._v("混乱的交互界面，严重缺乏正交性和统一性的设计让 doom-emacs 对用户极其不友好，往往只\n有对 doom-emacs 理解很深的用户，才能驾驭代码中各种各样的 Avada Kedavra. 这里举几个\n我遇到的简单例子")]),a._v(" "),t("h4",{attrs:{id:"缺乏正交性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺乏正交性","aria-hidden":"true"}},[a._v("#")]),a._v(" 缺乏正交性")]),a._v(" "),t("p",[a._v("doom-emacs 除了用 "),t("code",[a._v("use-package")]),a._v("  提供的 "),t("code",[a._v(":config")]),a._v("  关键字延迟加载配置，又重新发明了一个\n "),t("code",[a._v("after!")]),a._v("  宏。很多时候 "),t("code",[a._v(":config")]),a._v("  和 "),t("code",[a._v("after!")]),a._v("  往往混在一起，让你摸不着头脑.")]),a._v(" "),t("h4",{attrs:{id:"宏的-重载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#宏的-重载","aria-hidden":"true"}},[a._v("#")]),a._v(' 宏的 "重载"')]),a._v(" "),t("p",[t("code",[a._v("add-hook!")]),a._v('  宏上支持各种各样的 "重载"'),t("sup",{staticClass:"footnote-ref"},[t("a",{attrs:{href:"#fn3",id:"fnref3"}},[a._v("[3]")])]),a._v(", 对比两段等价代码的不同写法")]),a._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("add-hook!")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[a._v("'emacs-lisp-mode-hook")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[a._v("'ignore")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("add-hook!")]),a._v(" emacs-lisp-mode "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[a._v("'ignore")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("这里头的奥秘在于 "),t("code",[a._v("emacs-lisp-mode")]),a._v("  没有 quote 的时候 "),t("code",[a._v("add-hook!")]),a._v("  宏会自动给你加上一\n个 "),t("code",[a._v("-hook")]),a._v("  的后缀。看起来是可以节省打字功夫的精巧设计，然而可能作者自己也记不住这\n些规则，doom-emacs 里有时用起 "),t("code",[a._v("'xxx-hook")]),a._v(" , 有时直接用 "),t("code",[a._v("xxx")]),a._v(" . 不如直接统一用\n "),t("code",[a._v("'xxx-hook")]),a._v(" , 和 Emacs 的 "),t("code",[a._v("add-hook")]),a._v("  保持一致.")]),a._v(" "),t("h4",{attrs:{id:"粗暴的宏实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#粗暴的宏实现","aria-hidden":"true"}},[a._v("#")]),a._v(" 粗暴的宏实现")]),a._v(" "),t("p",[a._v('前面说过，只有对 doom-emacs 十分理解的深度 "黑客", 才能准确的把握这些 '),t("code",[a._v("XXX!")]),a._v("  的脾气.\n 然而，当你深入每个 macro 的内部试图理解它们的工作机制时，却发现这些宏的实现往往是\n天坑.")]),a._v(" "),t("p",[a._v('作者知道宏是一种很好的抽象手段，但是在宏内部却缺乏适当的抽象，完全可以使用 " 模式\n匹配 " 来简化的解析手段，却要用上各种各样的 '),t("code",[a._v("car")]),a._v(" ,  "),t("code",[a._v("caar")]),a._v(" ,  "),t("code",[a._v("caddddr")]),a._v(" ... 等自带混淆\n的原始的列表操作，看得你眼花缭乱，不知所云.")]),a._v(" "),t("h2",{attrs:{id:"layer-的错误设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#layer-的错误设计","aria-hidden":"true"}},[a._v("#")]),a._v(" Layer 的错误设计")]),a._v(" "),t("p",[a._v('不止在 doom-emacs 里，许多通用配置都提供了类似 "Layer" 这样的概念'),t("sup",{staticClass:"footnote-ref"},[t("a",{attrs:{href:"#fn4",id:"fnref4"}},[a._v("[4]")])]),a._v("，用来划分对不同\n功能的支持。比如在 Spacemacs 里，C++ 语言和 Java 语言分别在一个不同的 layer, 这样\n你就可以按自己的需要分别使用不同的 Layer, 比如我最近要写一点 Lisp, 我就打开 Lisp\nlayer, 几天后我对 OCaml 感兴趣，我就又打开 OCaml layer, 等等...")]),a._v(" "),t("p",[a._v("不得不说结构化的配置是有好处的。这样不同语言的配置可以交给不同的，精于本语言的\n Emacs 用户来参与维护。然而经过仔细分析后，我发现这些重量级配置的 layer system, 很\n大程度上没有做对.")]),a._v(" "),t("p",[a._v('Layer 这一概念有点类似于 Emacs 里的 "Minor Mode". 按 GNU Emacs User Manual 的'),t("a",{attrs:{href:"https://www.gnu.org/software/emacs/manual/html_node/emacs/Minor-Modes.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("说\n法"),t("OutboundLink")],1)]),a._v(" "),t("blockquote",[t("p",[a._v("A “minor mode” provides optional features that users may enable or disable\nindependently of the choice of major mode. Minor modes can be enabled\nindividually or in combination.")])]),a._v(" "),t("p",[a._v('事实上，minor mode 比 layer 更强大灵活，因为 minor-mode 允许你执行 "切换" 这个操作，而\n这些重量级配置重新发明的 layer 系统只能通过修改配置和重启来切换 layer. 比如将我的\n'),t("a",{attrs:{href:"https://framagit.org/citreu/emacs.d/blob/master/etc/init-emacs-lisp.el#L3",target:"_blank",rel:"noopener noreferrer"}},[a._v(" Emacs Lisp Mode 配\n置"),t("OutboundLink")],1),a._v("转\n化为一个 minor mode 😛")]),a._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token defun"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("defun")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cm/on-elisp-mode-load")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}}),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")])]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("setq-local")]),a._v(" mode-name "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Elisp"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("setq-local")]),a._v(" outline-regexp "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('";;;;* [^ \\t\\n]"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("define-minor-mode")]),a._v(" cm/elisp-config-mode\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Enable my Elisp configuration."')]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" cm/elisp-config-mode\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("progn")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("add-hook")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[a._v("'emacs-lisp-mode-hook")]),a._v("\n                  "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[a._v("#'cm/on-elisp-mode-load")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("define-key")]),a._v(" emacs-lisp-mode-map "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("kbd")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"C-c C-c"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[a._v("'eval-defun")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("define-key")]),a._v(" emacs-lisp-mode-map "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("kbd")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"C-c C-b"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[a._v("'eval-buffer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("progn")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("remove-hook")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[a._v("'emacs-lisp-mode-hook")]),a._v("\n                   "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[a._v("#'cm/on-elisp-mode-load")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("define-key")]),a._v(" emacs-lisp-mode-map "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("kbd")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"C-c C-c"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("define-key")]),a._v(" emacs-lisp-mode-map "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[a._v("kbd")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"C-c C-b"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("nil")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br")])]),t("p",[a._v("当我想启用这个设置的时候，我只需要在 Emacs 内使用"),t("kbd",[a._v("M-x\ncm/elisp-config-mode")]),a._v(", 来应用我的配置，并且我可以随时关闭这个 minor mode, 免\n得它影响我接下来的工作。这种简单而直接的机制，配合上 macro 来减少部分 boilderplate 代码，\n 达成的效果不差于单独设计的 layer 系统."),t("sup",{staticClass:"footnote-ref"},[t("a",{attrs:{href:"#fn5",id:"fnref5"}},[a._v("[5]")])])]),a._v(" "),t("p",[a._v("另外一点值得商榷的是，所有 layer 的配置文件都集中在这些重量级配置的仓库里，这意\n味着你每次更新都必须拉取所有 layer 的更新，即使你从来不会去用某些 layer!")]),a._v(" "),t("h2",{attrs:{id:"配置-vs-包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置-vs-包","aria-hidden":"true"}},[a._v("#")]),a._v(" 配置 VS 包")]),a._v(" "),t("p",[a._v("其实上述提到的问题，根本的原因就在于这些重量级配置的维护者们没有认识到配置与包的\n区别。不同于市面上大多数编辑器使用的 TOML, YAML, JSON... 基于声明式语言的配置文件，\nEmacs 的配置是用一门通用语言"),t("sup",{staticClass:"footnote-ref"},[t("a",{attrs:{href:"#fn6",id:"fnref6"}},[a._v("[6]")])]),a._v(" Emacs Lisp 写成的。从本质上来看，包和配置似乎\n并没有什么区别，他们都是一些写了 Emacs Lisp 的文本文件，Emacs 会自动读取并解释这\n些 Elisp 文件－－ Emacs 本体就是一个 Elisp 的解释器！")]),a._v(" "),t("p",[a._v('某种程度上，我们所写的 Emacs 配置文件，本质上就是一个 Elisp package, 不过这种\n "package" 里，有每个人自己基于自己实际情况的小修小补。然而当你试图把配置通用化，\n 重新引入像 package 一样的规范那就完全有必要了.')]),a._v(" "),t("p",[a._v("另一方面，将不同的配置分离到不同的 package 里，还可以充分利用包管理器自动生成\n autoload 文件的机制实现增量式的配置文件载入"),t("sup",{staticClass:"footnote-ref"},[t("a",{attrs:{href:"#fn7",id:"fnref7"}},[a._v("[7]")])]),a._v("，优化 Emacs 的启动速\n度.")]),a._v(" "),t("p",[a._v("这些重量级配置的作者，一开始并没有认识到把这些通用配置当作 package 来严格执行规\n范化的重要性。随着需求不断变大，各种各样的 Ad-hoc patch 像俄罗斯套娃一样一层盖一\n层，他们发现土胚起的高楼终究是不稳定的，但代码库已经积重难反..."),t("sup",{staticClass:"footnote-ref"},[t("a",{attrs:{href:"#fn8",id:"fnref8"}},[a._v("[8]")])])]),a._v(" "),t("h2",{attrs:{id:"结语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结语","aria-hidden":"true"}},[a._v("#")]),a._v(" 结语")]),a._v(" "),t("p",[a._v('我不是要劝你退坑 doom-emacs 转投 Spacemacs, 或者其他的配置了。这些问题不但\n doom-emacs 有，Spacemacs 里也有，在任何复杂一点的配置文件 (甚至可能包括我自己的), 都\n可能存在。我也不是要吹鼓 "通用配置已死" 的原教旨主义者。比起旗帜鲜明的站立场，我\n更希望从我的这些反思和研究中，得出一种现代化的大型配置组织指导方案.')]),a._v(" "),t("h4",{attrs:{id:"适度抽象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适度抽象","aria-hidden":"true"}},[a._v("#")]),a._v(" 适度抽象")]),a._v(" "),t("p",[a._v("为了达到通用性，一定程度的抽象是有必要的.\n"),t("a",{attrs:{href:"https://github.com/jwiegley/use-package",target:"_blank",rel:"noopener noreferrer"}},[a._v("use-package"),t("OutboundLink")],1),a._v(" 提供了按每个 package 分隔配\n置的抽象，我们也许需要更上层的抽象 (比如按不同编程语言抽象). 有了上层抽象，我们就\n可以抛弃一些不必要的底层抽象 (如 "),t("code",[a._v("add-hook!")]),a._v(" "),t("code",[a._v("after!")]),a._v(" ), 统一使用上层抽象的接口来控\n制。上层抽象必须具有良好的扩展性"),t("sup",{staticClass:"footnote-ref"},[t("a",{attrs:{href:"#fn9",id:"fnref9"}},[a._v("[9]")])]),a._v("以应付变化的配置需求.")]),a._v(" "),t("h4",{attrs:{id:"分离复杂的-hack-成-package"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分离复杂的-hack-成-package","aria-hidden":"true"}},[a._v("#")]),a._v(" 分离复杂的 Hack 成 package")]),a._v(" "),t("p",[a._v("当你使用了复杂的 Hack 来完成一些特定的功能，为什么不把他们提取出来成 package, 发布\n到 MELPA 呢。不要害羞的认为自己的 hack 是没有价值的，重复造轮子的工作。对于个人开发\n者，发布 package 不但可以造福社区里的其他人，ELPA 仓库的审核员也会指导你的 Elisp 技巧，\n 让你更快的进步。对于通用型配置来说，上文中我已经提到了模块化和分离配置的好处，在\n此就不再赘述.")]),a._v(" "),t("p",[a._v("doom-emacs 和 Spacemacs 某种程度上做到了一定的分离。然而正如上述，这种分\n离并不彻底。将配置框架抽象出来，不同的 layer 封装成不同的 package, 或许是更好的解决\n方案.")]),a._v(" "),t("h4",{attrs:{id:"必须要有自己的-elpa-仓库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#必须要有自己的-elpa-仓库","aria-hidden":"true"}},[a._v("#")]),a._v(" 必须要有自己的 ELPA 仓库"),t("sup",{staticClass:"footnote-ref"},[t("a",{attrs:{href:"#fn10",id:"fnref10"}},[a._v("[10]")])])]),a._v(" "),t("p",[a._v("有的配置过于零碎，打包成 package 时不一定能被 MELPA 接受，这时你可以自建一个 ELPA 服务\n器托管。另一方面，由于 MELPA 滚动更新的性质，与 doom-emacs 和 Spacemacs 这些提供一个稳\n定版配置的努力 (master branch) 相悖"),t("sup",{staticClass:"footnote-ref"},[t("a",{attrs:{href:"#fn11",id:"fnref11"}},[a._v("[11]")])]),a._v("，经常会造成旧配置的 Hack 代码跟不上新插\n件的情况。搭建自己的 ELPA 镜像维持插件稳定性就十分有必要了.")]),a._v(" "),t("h2",{attrs:{id:"延伸阅读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#延伸阅读","aria-hidden":"true"}},[a._v("#")]),a._v(" 延伸阅读")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://www.yinwang.org/blog-cn/2013/03/29/scripting-language",target:"_blank",rel:"noopener noreferrer"}},[a._v('什么是 "脚本语言"'),t("OutboundLink")],1),t("sup",{staticClass:"footnote-ref"},[t("a",{attrs:{href:"#fn12",id:"fnref12"}},[a._v("[12]")])])])]),a._v(" "),t("hr",{staticClass:"footnotes-sep"}),a._v(" "),t("section",{staticClass:"footnotes"},[t("ol",{staticClass:"footnotes-list"},[t("li",{staticClass:"footnote-item",attrs:{id:"fn1"}},[t("p",[a._v("最搞笑的是这个 lambda! 宏还用的是 Unicode 字符 λ, 这大概会让不少终端 Emacs\n 用户抓狂. "),t("a",{staticClass:"footnote-backref",attrs:{href:"#fnref1"}},[a._v("↩︎")])])]),a._v(" "),t("li",{staticClass:"footnote-item",attrs:{id:"fn2"}},[t("p",[t("a",{attrs:{href:"https://github.com/hlissner/doom-emacs/blob/develop/core/autoload/debug.el#L255",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/hlissner/doom-emacs/blob/develop/core/autoload/debug.el#L255"),t("OutboundLink")],1),a._v(" "),t("a",{staticClass:"footnote-backref",attrs:{href:"#fnref2"}},[a._v("↩︎")])])]),a._v(" "),t("li",{staticClass:"footnote-item",attrs:{id:"fn3"}},[t("p",[t("a",{attrs:{href:"https://github.com/hlissner/doom-emacs/blob/develop/core/core-lib.el#L226",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/hlissner/doom-emacs/blob/develop/core/core-lib.el#L226"),t("OutboundLink")],1),a._v(" "),t("a",{staticClass:"footnote-backref",attrs:{href:"#fnref3"}},[a._v("↩︎")])])]),a._v(" "),t("li",{staticClass:"footnote-item",attrs:{id:"fn4"}},[t("p",[a._v("最开始的 layer 概念大概要追溯到 purcell 开始用  "),t("code",[a._v("init-xxx.el")]),a._v("  来分离不同功\n能的配置的时候了. "),t("a",{staticClass:"footnote-backref",attrs:{href:"#fnref4"}},[a._v("↩︎")])])]),a._v(" "),t("li",{staticClass:"footnote-item",attrs:{id:"fn5"}},[t("p",[a._v("doom-emacs 按其标准操作安装额外的 package 的时需要重新执行 make 然\n后重新启动 Emacs "),t("a",{staticClass:"footnote-backref",attrs:{href:"#fnref5"}},[a._v("↩︎")])])]),a._v(" "),t("li",{staticClass:"footnote-item",attrs:{id:"fn6"}},[t("p",[a._v("虽然听起来有点怪异，但是 Elisp 并不含为特定领域设计的程序结构 (除了 macro),\n 所以可以视为一门通用编程语言 "),t("a",{staticClass:"footnote-backref",attrs:{href:"#fnref6"}},[a._v("↩︎")])])]),a._v(" "),t("li",{staticClass:"footnote-item",attrs:{id:"fn7"}},[t("p",[t("a",{attrs:{href:"https://www.gnu.org/software/emacs/manual/html_node/elisp/Packaging-Basics.html#Packaging-Basics",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.gnu.org/software/emacs/manual/html_node/elisp/Packaging-Basics.html#Packaging-Basics"),t("OutboundLink")],1),a._v(" "),t("a",{staticClass:"footnote-backref",attrs:{href:"#fnref7"}},[a._v("↩︎")])])]),a._v(" "),t("li",{staticClass:"footnote-item",attrs:{id:"fn8"}},[t("p",[a._v("截止到发稿时间，Spacemacs 的 develop 分支已经有 10250 个提交，\ndoom-emacs 的 develop 分支已经有 10543 个提交，他们的 master 分支都已经处于放\n弃维护的状态 "),t("a",{staticClass:"footnote-backref",attrs:{href:"#fnref8"}},[a._v("↩︎")])])]),a._v(" "),t("li",{staticClass:"footnote-item",attrs:{id:"fn9"}},[t("p",[a._v("这可以参考 use-package 的自定义 handler. "),t("a",{staticClass:"footnote-backref",attrs:{href:"#fnref9"}},[a._v("↩︎")])])]),a._v(" "),t("li",{staticClass:"footnote-item",attrs:{id:"fn10"}},[t("p",[a._v("事实上搭建一个自己的 ELPA 服务器并不困难，你可以复用 melpa 的"),t("a",{attrs:{href:"https://github.com/melpa/package-build",target:"_blank",rel:"noopener noreferrer"}},[a._v("构建系统"),t("OutboundLink")],1),a._v(" "),t("a",{staticClass:"footnote-backref",attrs:{href:"#fnref10"}},[a._v("↩︎")])])]),a._v(" "),t("li",{staticClass:"footnote-item",attrs:{id:"fn11"}},[t("p",[t("a",{attrs:{href:"https://emacs-china.org/t/topic/4167",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://emacs-china.org/t/topic/4167"),t("OutboundLink")],1),a._v(" "),t("a",{staticClass:"footnote-backref",attrs:{href:"#fnref11"}},[a._v("↩︎")])])]),a._v(" "),t("li",{staticClass:"footnote-item",attrs:{id:"fn12"}},[t("p",[a._v("我的一些观点于王垠先生的在该文章中提到的观点类似 "),t("a",{staticClass:"footnote-backref",attrs:{href:"#fnref12"}},[a._v("↩︎")])])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);