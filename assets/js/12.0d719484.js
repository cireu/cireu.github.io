(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{140:function(s,a,t){"use strict";t.r(a);var n=t(3),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"浅析-emacs-lisp-中的-compiler-macro"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浅析-emacs-lisp-中的-compiler-macro","aria-hidden":"true"}},[s._v("#")]),s._v(" 浅析 emacs-lisp 中的 compiler-macro")]),s._v(" "),t("h2",{attrs:{id:"什么是-compiler-macro"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-compiler-macro","aria-hidden":"true"}},[s._v("#")]),s._v(" 什么是 compiler macro")]),s._v(" "),t("p",[s._v("在 Elisp 里，我们通常会使用两种构造抽象的方式，macro 和 function. 这两者的区别相信读\n者都已经了然于胸 (如果你不清楚，建议查阅 Elisp Reference Manual).")]),s._v(" "),t("p",[s._v("简言之，compiler macro 可以在字节码编译时用特定的规则展开行如 "),t("code",[s._v("(func arg1 arg2 arg3)")]),s._v(" \n 的函数调用，宏调用不会被 compiler macro 展开，因为你可以在宏体里直接指定代码变换的\n方式，无需借助 compiler maro 的威力 :​).")]),s._v(" "),t("p",[s._v("注意：通常来说只有标准形式 "),t("code",[s._v("(func arg1 arg2)")]),s._v("  的函数调用才会被 compiler macro 打开优\n化，类似 "),t("code",[s._v("mapcar")]),s._v("  或者 "),t("code",[s._v("apply")]),s._v(" "),t("code",[s._v("funcall")]),s._v("  的高阶函数调用，compiler macro 将无能为力")]),s._v(" "),t("p",[s._v("是不是听着很熟悉？是的，compiler macro 可以做到内联优化，尽管 Elisp 编译器很笨拙，但\n所幸他给我们这些性能狂人留下了很多手动操作的空间.")]),s._v(" "),t("p",[s._v("compiler macro 并不能算作与 macro 和 function 类比的组织抽象的方式，只能算作 Elisp 为\n我们提供的函数优化器，它没有自己独立的语义，而是依附于函数而存在.")]),s._v(" "),t("div",{staticClass:"warning custom-block"},[t("p",{staticClass:"custom-block-title"},[s._v("警告")]),s._v(" "),t("p",[s._v("一个例外是 "),t("code",[s._v("(funcall #'func 1 2)")]),s._v("  或者 "),t("code",[s._v("(apply #'func '(1 2 3 4))")]),s._v(" , byte-compiler\n 会消除掉这种 "),t("code",[s._v("funcall")]),s._v("  或者 "),t("code",[s._v("apply")]),s._v(" , 然后交给 compiler macro 展开.")])]),s._v(" "),t("h2",{attrs:{id:"如何察看compiler-macro的展开结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何察看compiler-macro的展开结果","aria-hidden":"true"}},[s._v("#")]),s._v(" 如何察看 compiler macro 的展开结果")]),s._v(" "),t("h3",{attrs:{id:"macroexpand"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#macroexpand","aria-hidden":"true"}},[s._v("#")]),s._v(" macroexpand")]),s._v(" "),t("p",[t("code",[s._v("macroexpand")]),s._v(" "),t("code",[s._v("macroexpand-1")]),s._v(" "),t("code",[s._v("macroexpand-all")]),s._v("  可以打开直接 compiler macro.")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[s._v("ELISP> "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("macroexpand-all")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("cadr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("car")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("cdr")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这里用 "),t("code",[s._v("cadr")]),s._v("  举例子，cadr 可以取出列表中第二个元素，等效于取列表的 "),t("code",[s._v("cdr")]),s._v("  的 "),t("code",[s._v("car")]),s._v(" .\n 可以看出来 compiler macro 直接把 cadr 展开成 "),t("code",[s._v("(car (cdr x))")])]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[s._v("ELISP> "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("macroexpand-all")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("mapcar")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("#'cadr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("mapcar")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("#'cadr")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("在这里， "),t("code",[s._v("cadr")]),s._v("  作为 mapcar 的参数使用，compiler macro 就无能为力了.")]),s._v(" "),t("h3",{attrs:{id:"cl-compiler-macroexpand"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cl-compiler-macroexpand","aria-hidden":"true"}},[s._v("#")]),s._v(" cl-compiler-macroexpand")]),s._v(" "),t("p",[s._v("但是有时候你可能希望不要打开常规宏，只打开 compiler macro, 这时可以使用 "),t("code",[s._v("cl-lib")]),s._v("  中提\n供的 "),t("code",[s._v("cl-compiler-macroexpand")])]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[s._v("ELISP> "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("cl-compiler-macroexpand")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("cadr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("car")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("cdr")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[s._v("ELISP> "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("cl-compiler-macroexpand")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("if-let*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("a")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("cadr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("if-let*")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("a")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("cadr")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("对比")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[s._v("ELISP> "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("macroexpand-all")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("if-let*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("a")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("cadr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let*")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("a")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("t")]),s._v("\n           "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("car")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("cdr")]),s._v("\n             "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" a a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"macrostep"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#macrostep","aria-hidden":"true"}},[s._v("#")]),s._v(" macrostep")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/joddie/macrostep",target:"_blank",rel:"noopener noreferrer"}},[s._v("macrostep"),t("OutboundLink")],1),s._v(" 可以展开 compiler macro, 在\n macrostep 里，compiler macro 和 macro 会用不同的 face 来标记")]),s._v(" "),t("h2",{attrs:{id:"如何编写compiler-macro"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何编写compiler-macro","aria-hidden":"true"}},[s._v("#")]),s._v(" 如何编写 compiler macro")]),s._v(" "),t("h3",{attrs:{id:"compiler-macro的定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compiler-macro的定义","aria-hidden":"true"}},[s._v("#")]),s._v(" compiler macro 的定义")]),s._v(" "),t("p",[s._v("compiler-macro 的定义和常规宏一样，是一个返回一个 s 表达式的 lambda, 这个 lambda 接收\n的参数数量视用户调用 compiler macro 对应的函数时传入的数量而定。第一个参数固定为要展开的 form,\n 其余的参数依次为用户传入函数调用的参数.")]),s._v(" "),t("h3",{attrs:{id:"compiler-macro-symbol-property"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compiler-macro-symbol-property","aria-hidden":"true"}},[s._v("#")]),s._v(" "),t("code",[s._v("compiler-macro")]),s._v("  symbol property")]),s._v(" "),t("p",[s._v("为了使 compiler macro 生效，你需要将你定义的 compiler macro 设置为目标函数 symbol 的\n "),t("code",[s._v("compiler-macro")]),s._v("  property 上.")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("defalias")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'my-list")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'list")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("put")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'my-list")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'compiler-macro")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token lambda"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("lambda")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}},[t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("form")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token rest-vars"}},[t("span",{pre:!0,attrs:{class:"token lisp-marker"}},[s._v("&rest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("args")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("message")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Form: %'),t("span",{pre:!0,attrs:{class:"token argument"}},[s._v("S")]),s._v(', ARGS: %S"')]),s._v(" form args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            form"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("cl-compiler-macroexpand")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-list")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("当我们展开 compiler macro 时，会得到信息")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[s._v("Form: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-list")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", ARGS: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("当你的 compiler macro 只用于一个函数，一般可以忽略掉 form 直接用 args.")]),s._v(" "),t("h3",{attrs:{id:"declare-form"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#declare-form","aria-hidden":"true"}},[s._v("#")]),s._v(" declare form")]),s._v(" "),t("p",[s._v("在 Emacs 24.4 或更高版本，你可以直接在函数的 "),t("code",[s._v("declare")]),s._v("  form 中指定 compiler macro,")]),s._v(" "),t("p",[s._v("详见"),t("a",{attrs:{href:"https://www.gnu.org/software/emacs/manual/html_node/elisp/Declare-Form.html",target:"_blank",rel:"noopener noreferrer"}},[s._v(" manual"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"实战"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实战","aria-hidden":"true"}},[s._v("#")]),s._v(" 实战")]),s._v(" "),t("h3",{attrs:{id:"my-list-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#my-list-函数","aria-hidden":"true"}},[s._v("#")]),s._v(" "),t("code",[s._v("my-list*")]),s._v("  函数")]),s._v(" "),t("p",[s._v("考虑函数 "),t("code",[s._v("my-list*")]),s._v(" , 它接受任意数量的参数，将他们从头用 cons 连接到尾部.")]),s._v(" "),t("p",[s._v("我们的初版函数是这样的.")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token defun"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defun")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("my-list*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}},[t("span",{pre:!0,attrs:{class:"token rest-vars"}},[t("span",{pre:!0,attrs:{class:"token lisp-marker"}},[s._v("&rest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("args")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("rargs")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("reverse")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("result")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("car")]),s._v(" rargs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("dolist")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("arg")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("cdr")]),s._v(" rargs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("push")]),s._v(" arg result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-list*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";=> '(1 2 . 3)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-list*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";=> '(1 2 3)")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("我们可以用高阶函数把它变得更简洁")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("require")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'cl-lib")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token defun"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defun")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("my-list*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}},[t("span",{pre:!0,attrs:{class:"token rest-vars"}},[t("span",{pre:!0,attrs:{class:"token lisp-marker"}},[s._v("&rest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("args")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("cl-reduce")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("#'cons")]),s._v(" args "),t("span",{pre:!0,attrs:{class:"token lisp-property property"}},[s._v(":from-end")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("t")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("你可能已经看出来， "),t("code",[s._v("my-list*")]),s._v("  等效于手写 "),t("code",[s._v("(cons arg1 (cons arg2 (cons arg3 ...)))")]),s._v(" .\n 另一方面，我们都知道打开的循环比循环更高效，但是我们完全没有必要为了性能而手写展\n开形式，更何况 "),t("code",[s._v("my-list*")]),s._v("  接受任意数量的参数，根本无法直接手写展开.")]),s._v(" "),t("p",[s._v("这时候可以利用 compiler macro 生成 sexp 优化我们的 "),t("code",[s._v("my-list*")]),s._v("  函数")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("put")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'my-list*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'compiler-macro")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token lambda"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("lambda")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}},[t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("_form")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token rest-vars"}},[t("span",{pre:!0,attrs:{class:"token lisp-marker"}},[s._v("&rest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("args")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";; 这里可以用`nreverse', 因为每次调用`(my-list* 1 2 3)'都会生成")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";; 新的args, 而`(apply #'my-list* something)' 不会触发compiler macro")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("rargs")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("nreverse")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("head")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("pop")]),s._v(" rargs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("result")]),s._v(" head"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("dolist")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("arg")]),s._v(" rargs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n           "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("setq")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cons")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",arg")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",result")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("来尝试一下")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[s._v("ELISP> "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("cl-compiler-macroexpand")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-list*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cons")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cons")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cons")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n                  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cons")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cons")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n                              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cons")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("\n                                    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cons")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("\n                                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cons")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("\n                                                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("cons")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("可以看到我们写的 compiler macro 已经如愿展开了.")]),s._v(" "),t("div",{staticClass:"danger custom-block"},[t("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),t("p",[s._v("在 compiler macro 中，你可以随意修改函数展开的方式，如果操作不当，很可能会导\n致直接调用函数与 "),t("code",[s._v("funcall")]),s._v("  调用函数时函数的行为不一致！")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token defun"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defun")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("my-id")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}},[t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("x")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("put")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'my-id")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'compiler-macro")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token lambda"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("lambda")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}},[t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("_")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("arg")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("list")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",arg")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; Malformed compiler macro")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";; Compiler macro不会在解释运行时展开, 这里使用`my-id'的原始定义.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-id")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                               "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";=> 1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("eval")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("byte-compile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-id")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";=> (1) ???")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("eval")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("byte-compile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("f")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("#'my-id")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("funcall")]),s._v(" f "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";=> 1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("这里利用 funcall 规避了 compiler macro 展开，由于我们的 compiler macro 不规范，导致\n "),t("code",[s._v("(my-id 1)")]),s._v("  和 "),t("code",[s._v("(funcall f 1)")]),s._v("  造成了不一致的结果，请使用 compiler macro 的时候务必\n注意，小心不要造成 undefined behaviour.")])]),s._v(" "),t("h2",{attrs:{id:"广义变量展开中的compiler-macro"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#广义变量展开中的compiler-macro","aria-hidden":"true"}},[s._v("#")]),s._v(" 广义变量展开中的 compiler macro")]),s._v(" "),t("p",[s._v("由于 "),t("code",[s._v("macroexpand")]),s._v("  可以展开 compiler macro, 因此 "),t("code",[s._v("setf")]),s._v("  也会打开广义变量里的\n compiler macro")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token defun"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defun")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("my-aref")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}},[t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("arr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("idx")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("aref")]),s._v(" arr idx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("macroexpand-all")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("setf")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-aref")]),s._v(" arr "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";; => (let* ((v arr)) (\\(setf\\ my-aref\\) 3 v 1))")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("put")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'my-aref")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'compiler-macro")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token lambda"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("lambda")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}},[t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("_")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("arr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("idx")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("aref")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",arr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",idx")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("macroexpand-all")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("setf")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-aref")]),s._v(" arr "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";; => (let* ((v arr)) (aset v 1 3))")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("我们用 "),t("code",[s._v("my-aref")]),s._v("  简单包裹了 "),t("code",[s._v("aref")]),s._v("  函数，然而 Emacs 并不会进入我们的函数定义去查看我们\n实际进行的动作，emacs 只会去寻找 "),t("code",[s._v("my-aref")]),s._v("  的 gv-setter, 并且在找不到的情况下使用了\n setter 的默认值 "),t("code",[s._v("(setf my-aref)")]),s._v(" (当然这里我们没有定义),\n 而使用了 compiler macro 后，我们给编译器足够的提示，成功 "),t("code",[s._v("my-aref")]),s._v("  被打开成对应的\n "),t("code",[s._v("aref")]),s._v("  Emacs 已经定义了 "),t("code",[s._v("aref")]),s._v("  的 gv-setter "),t("code",[s._v("aset")]),s._v(" ,  "),t("code",[s._v("setf")]),s._v("  就可以直接使用 aset 作为\n my-aref 的 gv-setter")]),s._v(" "),t("h2",{attrs:{id:"define-inline"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#define-inline","aria-hidden":"true"}},[s._v("#")]),s._v(" define-inline")]),s._v(" "),t("p",[s._v("为了更好的利用 compiler macro, Emacs 25 提供了 "),t("code",[s._v("inline.el")]),s._v(" , 作为 compiler 的上层包装，\n 协助用户更好更简单写出安全的内联函数.")]),s._v(" "),t("h3",{attrs:{id:"inline-quote"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inline-quote","aria-hidden":"true"}},[s._v("#")]),s._v(" inline-quote")]),s._v(" "),t("p",[s._v("用 "),t("code",[s._v("define-inline")]),s._v("  定义函数类似于定义一个宏，不过用 "),t("code",[s._v("inline-quote")]),s._v("  代替  "),t("code",[s._v("`")]),s._v(" \n 在 "),t("code",[s._v("inline-quote")]),s._v("  中，你只能使用 "),t("code",[s._v(",")]),s._v("  而不能使用 "),t("code",[s._v(",@")]),s._v(" , 这是为了防止生成的 compiler\nmacro 意外的破坏函数语义.")]),s._v(" "),t("p",[s._v("用 "),t("code",[s._v("define-inline")]),s._v("  重新定义刚才提到的 "),t("code",[s._v("my-aref")])]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("require")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'inline")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("define-inline")]),s._v(" my-aref-inline "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("arr")]),s._v(" idx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("inline-quote")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("aref")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",arr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",idx")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-aref-inline")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";=> 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("macroexpand-all")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("setf")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-aref-inline")]),s._v(" arr "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";=> (let* ((v arr)) (aset v 1 3))")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("用 "),t("code",[s._v("macroexpand-all")]),s._v("  直接打开我们定义 "),t("code",[s._v("my-aref-inline")]),s._v("  的过程，得到")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("progn")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token defun"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defun")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("my-aref-inline")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}},[t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("arr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("idx")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token declare keyword"}},[s._v("declare")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("compiler-macro")]),s._v(" my-aref-inline--inliner"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("aref")]),s._v(" arr idx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token lisp-property property"}},[s._v(":autoload-end")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("eval-and-compile")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token defun"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defun")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("my-aref-inline--inliner")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}},[t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("inline--form")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("arr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("idx")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("ignore")]),s._v(" inline--form"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'inline--just-use")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("list")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token quoted-symbol variable symbol"}},[s._v("'aref")]),s._v(" arr idx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("可以看出来底层还是用的 compiler macro 的机制.")]),s._v(" "),t("h3",{attrs:{id:"inline-letevals"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inline-letevals","aria-hidden":"true"}},[s._v("#")]),s._v(" inline-letevals")]),s._v(" "),t("p",[s._v("考虑函数")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token defun"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defun")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}},[t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("num")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("*")]),s._v(" num num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("如何用 "),t("code",[s._v("define-inline")]),s._v("  定义其内联版本？")]),s._v(" "),t("p",[s._v("尝试直接用 "),t("code",[s._v("inline-quote")])]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("define-inline")]),s._v(" pow2-inline "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("num")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("inline-quote")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",num")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",num")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("pow2-inline")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";=> 9")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("pow2-inline")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";=> 4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("eval")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("byte-compile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("pow2-inline")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";=> 4")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("看起来没有问题，继续测试")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token defun"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defun")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("my-side-effect-2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}}),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Do a message, and return 2."')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("message")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Side effect!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("eval")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("byte-compile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("pow2-inline")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-side-effect-2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(";=> 4")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v('这里，message "Side effect!" 被发送了两次，我们用 '),t("code",[s._v("macroexpand")]),s._v("  打开 "),t("code",[s._v("pow2-inline")]),s._v("  看\n看")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("*")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-side-effect-2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-side-effect-2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("看起来我们的参数 "),t("code",[s._v("(my-side-effect-2)")]),s._v("  被直接内联到了 "),t("code",[s._v("*")]),s._v("  的两个参数位置里，造成\n "),t("code",[s._v("my-side-effect-2")]),s._v("  被求值两次，这显然不是我们想要的结果.")]),s._v(" "),t("p",[s._v("对于这种情况， "),t("code",[s._v("define-inline")]),s._v("  为我们提供了 "),t("code",[s._v("inline-letevals")]),s._v("  来控制一个表达式只被\n计算一次")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("define-inline")]),s._v(" pow2-inline-2 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("num")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("inline-letevals")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("num")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("inline-quote")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",num")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",num")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("eval")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("byte-compile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("pow2-inline-2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-side-effect-2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(';=> 只有一次"Side Effect!"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("展开 "),t("code",[s._v("pow2-inline-2")]),s._v("  的调用")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("print-gensym")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("t")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("print-circle")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("t")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("prin1-to-string")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("macroexpand-all")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("pow2-inline-2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-side-effect-2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(';; => "(let* ((#1=#:num (my-side-effect-2))) (* #1# #1#))"')]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("可以看出来 "),t("code",[s._v("inline-letevals")]),s._v("  类似与我们编写 macro 时用 let 和 gensym 保护 expression 的方\n式.")]),s._v(" "),t("h2",{attrs:{id:"faq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#faq","aria-hidden":"true"}},[s._v("#")]),s._v(" FAQ")]),s._v(" "),t("h3",{attrs:{id:"为什么不直接使用macro"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么不直接使用macro","aria-hidden":"true"}},[s._v("#")]),s._v(" 为什么不直接使用 macro?")]),s._v(" "),t("p",[s._v("从语法上看 macro 不能作为高阶函数的参数使用 (当然你可以拐着弯用 lambda 包裹 macro). 而\n function 可以.")]),s._v(" "),t("p",[s._v("compiler macro 和 macro 一样，会被 Emacs 的 Eager macroexpansion 机制打开.")]),s._v(" "),t("p",[s._v("在老版本的 Emacs 中，有人喜欢用宏替代内联函数，这在新版本中的 Emacs 完全没有必要，函\n数和宏完全是两种不同语义的东西，如果你需要内联函数优化，请使用 compiler macro, 或\n者 "),t("code",[s._v("define-inline")]),s._v("  这种上层包装.")]),s._v(" "),t("h3",{attrs:{id:"用compiler-macro做内联和使用defsubst的内联有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用compiler-macro做内联和使用defsubst的内联有什么区别","aria-hidden":"true"}},[s._v("#")]),s._v(" 用 compiler macro 做内联和使用 "),t("code",[s._v("defsubst")]),s._v("  的内联有什么区别？")]),s._v(" "),t("p",[t("code",[s._v("defsubst")]),s._v("  是另一种定义内联函数的方式，对比 compiler macro,  "),t("code",[s._v("defsubst")]),s._v("  内联的方式更\n为保守.")]),s._v(" "),t("p",[t("code",[s._v("defsubst")]),s._v("  无法用 "),t("code",[s._v("macroexpand")]),s._v("  展开，因此 "),t("code",[s._v("defsubst")]),s._v("  定义的 inline function 不能作为\n "),t("code",[s._v("setf")]),s._v("  的 form.")]),s._v(" "),t("p",[s._v("比如， "),t("code",[s._v("defsubst")]),s._v("  会保持 lisp function 对 argument 严格从左到右求值的逻辑。同样也会建\n立函数专有的变量作用域。比如上文用来举例的 "),t("code",[s._v("pow2-inline")]),s._v(" , 用 "),t("code",[s._v("defsubst")]),s._v("  可以直接定\n义为")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("defsubst")]),s._v(" pow2-subst "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("num")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("*")]),s._v(" num num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("eval")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("byte-compile")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("pow2-subst")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("my-side-effect-2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v(';只有一次"Side Effect!"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("使用 compiler macro 时，求值策略是由用户自行决定的.")]),s._v(" "),t("div",{staticClass:"language-lisp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lisp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token defun"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("defun")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("say-is")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token arguments"}},[t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("somthing")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token argument variable"}},[s._v("type")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("message")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%s is %s"')]),s._v(" something type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("define-inline")]),s._v(" simple-case "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("something")]),s._v(" type"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("inline-letevals")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("something")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("inline-quote")]),s._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("cl-case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",something")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("donkey")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("say-is")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",something")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("rabbit")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token car"}},[s._v("say-is")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",something")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token splice symbol variable"}},[s._v(",type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("这里我们没有用 "),t("code",[s._v("inline-letevals")]),s._v("  保护 "),t("code",[s._v("type")]),s._v("  变量，因为我们知道 cl-case 的两个分支不可\n能同时执行，而 type 被作为函数 "),t("code",[s._v("say-is")]),s._v("  的参数， "),t("code",[s._v("say-is")]),s._v("  会将其 eval. 这样我们就达成了\n类似 "),t("code",[s._v("lazy evaluation")]),s._v("  的效果")]),s._v(" "),t("h2",{attrs:{id:"相关讨论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关讨论","aria-hidden":"true"}},[s._v("#")]),s._v(" 相关讨论")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://emacs-china.org/t/elisp-compiler-macro/10552",target:"_blank",rel:"noopener noreferrer"}},[s._v("见 emacs-china 论坛"),t("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);